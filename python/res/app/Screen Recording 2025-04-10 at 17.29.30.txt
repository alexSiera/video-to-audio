Верстки, JavaScript и React. Первый вопрос относительно верстки, первый вопрос достаточно общего характера, какие есть CSS-инструменты для разработки адаптивной и кросс-браузерной верстки? Ну и также у нас есть еще этот метатег вьюпорт, когда мы его делаем, мы, собственно, там, верстка адаптируется для мобильных экранов. А, хорошо, а по поводу кроссбраузерной верстки, может быть, сталкивались с этим? Для процесса используются так называемые префиксы, браузерные префиксы, вебкит и вебкит из примеров Расставить вендерные префиксы, каким образом это можно было бы сделать? Ну, есть, собственно говоря, это расширение автопрефиксер, который это делает автоматически. Какое расширение? В эскоде ставится расширение, автопрефиксер, и когда ты сохраняешь файл, он автоматически добирет префиксер. А, попросите, Александр, в каком эскоде? Нам нужно, чтобы у клиентов в сборке? В сборке, я понял, да, ну, просто Просто надо было пояснить тогда, что у клиента в сборке. Александр, нас весь код вообще не интересует нас, нам нужно расставить интеграторный пэффикса, чтобы у клиента в блоке в сборщике это делается, настраиваются модули, добляются и… Каким образом? Добавляются в конфиг веб-пак эта конфигурация, ну, этот автопрефиксер добавляется в конфиг веб-паке Но это пакет, который, НПМовский, который, собственно говоря, добавляет автоматический прессу.  Если мы хотим обращать, например, то можно при помощи камов соотрисовать. Можно, например, использовать, импортировать два изображения треугольника и абсолютно их посадить. Можно бордерами нарисовать. Если сказать, что именно нужно, ну, отряд, чтобы белый прямоугольник поместить в середине красного круга  допустим, один, но смотря как они должны располагаться, если, ну, получается, за тендексами мы задаем что-то будет внизу, что-то будет вверху, получается, вот, то есть мы, при помощи позицией на абсолют, мы их ставим на одно место, например, и, по сути, за тендексами мы там один поверх, один элемент дает другого на становится, например, там, этот квадрат вписывается в круг.  А как мы именно середину прямоугольного переместим? Ну, есть топ, ну, топ пятьдесят, лэфт пятьдесят, и надо будет трансформтранслейт сделать, минус пятьдесят процентов, и для икса, для икса, для икса.  Ну, собственно, простые и объекты. Простые — это, собственно, number, begin, string, boolean, null, undefined, символ и всё. И второй тип данных — это тот объектный. Собственно, в простом мы по значению работаем в объектном у нас посылке работает, передача значения. Передача значения. Уникальный набор данных, то есть мы уникализируем какой-то набор данных, и значения могут встречаться только один раз, в сайте. Собственно, это тоже объект. Итак, извините, я больше прослушала, а чем меб отличается от объекта? Меб в качестве кулича может использовать любое значение, не только string Фор ин для объектов, фор оф для массивов, да. Что мы перебираем, например, с помощью цикла формы объекта? Мне немного не так. Получается, да, формов тоже для объектов и формов для объектов, но у нас, получается, формов Он обходит, ну, получается, терируемый объекта, который можно терировать, и он вызывает там оператора на каждом шаге выполнения. Ну, вот и... — Ну, что, что, что, что, Александр, что такое оператор на каждом шаге выполнения? Вы что-то читаете, я не знаю, что это значит. Мы, по сути, итерируемся по объекту и вызываем на каждом шаге, вызываем, собственно говоря, какой-либо оператор. Я про это имею в виду. На каком каждом шаге мы вызываем какой-либо оператор, я не понимаю, что значит на каждом шаге мы вызываем какой-либо оператор? Мы берем, получается, объект, проходим по его свойствам и на каждом свойстве мы вызываем какой-либо оператор. Это цикл формы. Что значит, мы вызываем какой-то оператор? Что за оператор вы вызываете там? Пользуем цикл «формов» или «формин», мы проходим по каждому его свойству и делаем какое-либо «колбэк», так называем. Так, поняла вас, хорошо, поняла. То есть вы хотите сказать, что просто мы в цикле можем какое-то действие заложить, да, вы это хотите сказать, по-другому? Мы перебирать можем свойства в объекте, тем двумя методами. Так, свойства в объекте, ага, хорошо, поняла вас, ага, с помощью цикла «формов»? Поняла. А, хорошо. Ну, всё, я понимаю, пару басилов вы рассказали. Хорошо, спасибо. Давайте тогда пойдем дальше, следующий вопрос такой. Представьте себе, что вам из кода JavaScript нужно отправить сетевой запрос на сервер. Каким образом это можно сделать с помощью активных методов JavaScript? Например, функция фейч. А можете рассказать, как работает фейч? Мы, собственно говоря, в фечь помещаем какую-либо ссылку, например, на сторонний веб-ресурс и, собственно говоря, вызываем в коде фечи. Фечь возвращает промисс, который мы можем дождаться и, собственно говоря, получить результат и что-то с ним сделать. Которым мы можем в дальнейшем, ну, обычно... А что значит респонд, что будет в этом респонсе? Объект... Объект респонса будет, получается, и дальше мы можем Джейсон преобразовать, вызвать метод Джейсон у него. Объект респонс, что там внутри будет? Какие порядок будут?  Статус, да, данный, дата, например, статус запроса, успешен, неуспешен. А, хорошо, а после этого нам данные получить как? Ну, сделать функцию JSON над респондом, взять респонд и точку JSON и, собственно говоря, так получить данные, например. Хорошо, а если у нас данные целями приходят не в формате JSON, а вдруг в формате? Респонте. То есть если Джейсон нам нужно какой-то метод использовать дополнительный, а если нет Джейсон, то просто берем пропорцы тапта, да, из респонса оригинального. Ну да. Поняла вас, спасибо. А в следующем, давайте тогда перейдем к вопросам по реакту. Первый вопрос тоже так общего характера, что такое реакт-фрагмент и зачем он нужен обычно в реакте?  в реакте, которым мы можем оборачивать какие-либо компоненты в реакте, а так как у нас в реакте может быть одна корневая домнода, соответственно, мы можем оборачивать эти элементы в реакте, если вам нужно, и, собственно говоря, они никак в верстке не появляются. То есть мы не дивом оборачиваем, а как бы фрагментом, который домноди никак не отображается. Да, да, отлично, всё так и есть, спасибо. Мой второй вопрос такой, можете, ну, так кратко описать, как работает хук юзэффект в реакте? Юзэффект. Ну, собственно говоря, у нас при помощи юзэффекта можно делать, допустим, методы жизненного цикла эмулировать, как в классах, собственно говоря, если мы, например, запускаем его с пустыми скобками юзэффекта, то он отрабатывает при малотекомпоненте  при малотекомпоненте. Если мы из него что-то возвращаем, например, функцию возвращаем, то это эмуляция размонтирования компонента. Юзиффект будет вызываться, ну мы можем в юзиффект в скобочке и в авторопроперти пропить, ну, собственно, определять какие-то переменные, при изменении которых будет этот юзиффект запускаться. Когда мы вызываем из-эффект, там получаются два у него аргумента. Он принимает первым аргументом колбек, а вторым аргументом получался массив зависимости, изменение которых, собственно говоря, он будет вызываться. Он должен быть с пустыми скопками. Что такое с пустыми скопками? Ну, то есть мы второй аргумент, вот этот зависимость, массив зависимости делаем пустым и возвращаем какой-либо этот... То есть всегда у нас массив зависимости должен быть обязательно пустым? Нет, не всегда. То, что мы хотим эмулировать, соответственно, этот метод жизневого цикла, когда разматривается компонент, мы делаем пустыми скопками. А если у нас есть функция в ритюрн, то есть у нас юзефект возвращает какую-то функцию, но при этом у нас массовизависимости не пустой, а есть какие-то переменные. Да, он будет вызываться каждый раз при вызове юзефекта. Что будет вызываться каждый раз? Ну, этот ритюрн. А вот, например, у нас есть в юзефекте функция, например, цель-тейма, а в ритюрн мы А в ретюрн мы возвращаем функцию клея таймал, да, то есть даём антервал какой-то и его очищаем, но при этом у нас массив зависимости не пустой, то каким образом эти функции работают? Так, массив зависимости еще раз не пустой? Да. Ну, по сути, у нас будет создаваться таймаут, и он будет, получается, убираться при размонтировании этого компонента. То есть когда мы с него, например, выйдем, надо будет... Нет, вот допустим, смотрите, у нас еще компонент не размонтировался, но у нас какая-то переменная в массиве зависимости изменилась.  Вот таким образом, все работают эти функции сета, например, таймал, доклея таймал. Соответственно, он там первый раз. У нас вот переменно изменилось, и эффект у нас должен сработать, у нас как раз она изменилась. Да, запускается с таймаут, и потом он, получается, чищается. То есть таймаута нет в итоге, да? Ну да. Поняла вас, спасибо. Знаете, следующий вопрос, связанный с формами, у нас на проектах, в банковских приложениях часто используются формы, ну, достаточно часто, Поэтому вопрос такой, в реакции есть управляемый и неуправляемый input, может быть, сталкивались с этим, чем они друг от друга отличаются, когда что лучше использовать? И, ну, неуправляемый в основном использовался, когда нужно оптимизировать, например, работу большой сложной формы, когда у нас множество перерисовок и множество изменений, собственно говоря, этих переменных, которые связаны, и, например, и библиотека React Hook Forms как раз-таки работает на этих, на вот как раз несвязанных импутах. А связанные, собственно, когда мы прям хотим жесткий контроль над значениями, и когда нам, например, нужно изменять, ну то есть мы хотим, например, при измене каких-либо переменных перелесовывать значение в инпутах, просто при неуправляемых там немножко другой механизм того, как меняется значение. Мы используем этот тариф, привязываем элементы и меняем они в Вели. Отлично. Да, спасибо большое, отлично. Смотрите, последний вопрос будет такой. Какие методы для активизации в этом приложении вы знаете, сталкивались по практике? Смотря что имеется в виду под оптимизации, если, например, имеется в виду... А, я сейчас утащу, если утащу под оптимизацией имеется в виду скорость загрузки первой страницы и также количество ресурсов, которые пользователь грузит себе на компьютер, когда заходит на нашу обстраницу. Ну, вот как раз, например, каширование, для реакта, например, актуально лези лодинг, соответственно, мы можем загружать страницу, когда она только используется, когда мы на ее переходим, например. Каким образом это работает? Ну, реакт первоначально эту страницу никак не загружает, когда, соответственно говоря, мы переходим на эту страницу, реакт, Джесс, собственно говоря, определяющему наив... А что значит, что конкретно в облигах происходит, что конкретно реакт делает? Ну, проверять, что мы по урову страницы, мы проверять, что мы на ней или нет, и, соответственно, грузить ее или нет, там есть, так называемый, саспент, можно компонент использовать, который, собственно говоря, Собственно говоря, заменит собой то, что мы загружаем. Но, соответственно, там есть проблема, что его нужно актуализировать, потому что данные могут поменяться, а кэш будет старый, то есть надо следить за тем, чтобы он был актуальный кэш. Как это этим следить? Ну, ставятся различного рода параметры, допустим, на том же Джинксе, то есть чтобы инвалидировался кэш. Так, подождите, Александр, мы про контент говорим, мы сами на контенте. Я понял. Ну, давайте про контент. Если мы используем какой-нибудь танста квери для запросов, который каширует запросы, например, мы… Ну, что, простите, что? Ну, есть библиотека танста квери для запросов. Какая, какая, еще раз? Ну, реакт квери она еще называется, реакт квери, танста квери. А, реакт квери, реакт квери, вы знаете, да, хорошо. А, танста квери, вы знаете, да, хорошо. А, танста квери, вы имеете в виду, да? Да, в ней, например, есть параметр инвалидейт, мы можем указывать через сколько каш, например, будет  будет устаревший. — Так, хорошо, каширование запросов, да, согласно с Вами. — С точки зрения фронта, так, оптимизация, мы можем использовать там современные форматы, например, изображений и современные форматы шрифтов, например, которые оптимизированы, вот, то же самое с видео, что еще мы на Фронтенде? Мы можем сборку оптимизировать, чтобы там чанки оптимизировать сборки, чтобы они там поменьше к сделку, чтобы они быстрее грузились, получается. Джиэскод и соответственно он, ну так же сборщик, он делит Джиэскод на эти чанки и потом при подруске он может, собственно, быстрее грузиться или медленнее, в зависимости от размера чанков. Я не понимаю, вы понимаете, я не очень понимаю, вот у нас, например, вся сборка Джаваскрипт-кода, она весит два мегабайта, да? Вырезвили это на два чанка по одному мегабайту, каким образом, два чанка по одному мегабайту загрузится быстрее, чем один чанк на два мегабайта Вопрос, загрузится ли это быстрее? Ну да, согласна с вами. Ну, обычно там вовлетели какие-то, так, хорошо, я согласна. Это еще все вруже в основной пересислили, да? Ну, в основной да, ну, если с такого еще, например, можно, но это уже не относится к фронту. Сжатие, например, Джейзип или любое другое сжатие на том же инжинксе, но обычно инжинксом делается, но можно и на фронтенде тоже сжимать. Фронт-Энде тоже сжимается сборщиками, сборку, собственно говоря. Зачем на фронт-Энде-то сборку сжимается? Да, это редко, это очень редкое, это очень редкое, в основном на том же инжинксе. А у нас, ну, если это, например, тот же самый, ну, так как это HTML, когда мы сжимаем, соответственно, у нас уменьшается размер файла. Нет, я понимаю, что не относится к оболим компрессии, я понимаю, просто зачем на фронт-Энде это делать, если обычно доделать На фронте это редко используется, обычно на Джимсе делается, на сервере делается. Да, да, да, да, на Джимсе, ведь мы заканчиваем, но с нас обеседование по фронтам все-таки. Спасибо большое, спасибо, основные способы, но перечитили, смотрите, у меня больше вопросов не осталось, когда я предлагаю вам рассказать о проекте и ответить на ваши вопросы, хорошо? Хорошо, хотелось бы узнать, что за проект, что там вообще используется, вот, самым про проект больше. Да, конечно, да, конечно, сейчас как раз я вам все расскажу, и если какие-то будут вопросы по работе проекту, то задавайте, постараюсь ответить на то, что я знаю. Итак, проект, на который сейчас идет набор фунтендер-разработчиков, называется «Интернет-банк для юридических лиц». Ну, я думаю, что вы знакомы с приложением на «Интернет-банка для физических лиц». Принцип, интернет-банк для юридических лиц, он похож по функциональности. Ну, не только он отличается по функционалу, но в целом, похоже, это приложение на Интернет-Банке на физических лиц. Это приложение уже на проде около полутора лет, то есть, в принципе, сейчас идет, скажем так, активная разработка, стремить приложение. Также у нас, например, часто вообновляются требования от Центробанка и необходимо править уже существующий функционал.  разрабатывать страницы приложений, которые еще не успели вывести на прод. То есть в основном работа будет идти в таком ключе. По стеку технологии это реакториеп скрипта и также микрофронты, то есть то, что вы как раз рассказывали о предыдущих проектах. Сам проект, он достаточно объемный, поэтому работа над ним разбита между командами. Всего над проектом заняты шесть команд, и эти шесть команды, они разбиты в целом. Шесть команды, они разбили функциональную, то есть есть команда, которая занимается кредитными, есть команда, которая занимается картами и так далее. То есть кажда команда работает вот на своей небольшой функциональностью. Состав команд одинаковый, это руководитель проекта, веб-разработчик, это реактор-разработчик в нашем случае, в мобильные разработчики, бэкенд-разработчик, аналитик, тестировщик и дизаймер. Соответственно, вы работаете вот в своей маленькой команде,  но также все равно, так как вы работаете над одним приложением, то вы будете пересекаться с другими командами, и также у этих команд есть фронтовый темплейт и беканый темплейт. Соответственно, задача уже темплейтуре — это непосредственно разработка приложения, в целом настройка приложения, то есть какие-то такие основные, основополагающие вещи по архитектуре в основном. Это работа функциональности. Так, наверно, это такая основная информация по проекту, может быть, у вас есть какие-то вопросы. Так, проект вообще, ну, получается, на долгое время или нет, в целом по времени? Ну, проект, ну, вне сформат полагается, что разработчики сейчас они закончат эту разработку в целом.  разработку в целом проекта, а затем нужно будет его поддерживать, так как у нас постоянно, ну, есть какие-то новые требования от Центробанка, новые потребности от бизнеса, поэтому татухой проект благосрочный. А бэкенд, получается, там, на чем он вообще? Смотрите, бэкенд у нас носит шарпи, но у нас контент-разработчики, они вообще не имеют отношения к бэканду.  Понятно. Ну так вроде бы по вопросам. Вроде бы всё. Отлично! Ну тогда если у вас появятся вопросы, можете их задать через Артема, в дальнейшем. Спасибо вам большое и хорошего вам дня. Седания. Хорошо, спасибо. Всё, спасибо.